# Human Tasks:
# 1. Replace <namespace_name> with your actual namespace (e.g., workflow-platform)
# 2. Replace <environment_label> with your deployment environment (e.g., dev, staging, prod)
# 3. Replace <alertmanager_configuration> with your actual Alertmanager configuration
# 4. Review and adjust resource limits based on your monitoring requirements
# 5. Verify alert routing and notification settings match your operational needs

# Requirement Addressed: Monitoring and Observability
# Location: Technical Specification/Cross-Cutting Concerns/Monitoring and Observability
# Description: Ensures that alerts are managed and notifications are sent for critical system events and anomalies.

---
# ConfigMap for Alertmanager configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: <namespace_name>
  labels:
    app: alertmanager
    environment: <environment_label>
data:
  alertmanager.yml: |
    global:
      resolve_timeout: 5m
      slack_api_url: '${SLACK_API_URL}'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: 'slack-notifications'
      routes:
        - match:
            severity: critical
          receiver: 'slack-notifications'
          continue: true
        - match:
            severity: warning
          receiver: 'slack-notifications'
          continue: true

    receivers:
      - name: 'slack-notifications'
        slack_configs:
          - channel: '#alerts'
            send_resolved: true
            title: '[{{ .Status | toUpper }}] {{ .CommonLabels.alertname }}'
            text: >-
              {{ range .Alerts }}
              *Alert:* {{ .Annotations.summary }}
              *Description:* {{ .Annotations.description }}
              *Severity:* {{ .Labels.severity }}
              *Service:* {{ .Labels.service }}
              {{ end }}

    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        equal: ['alertname', 'cluster', 'service']

---
# Deployment for Alertmanager
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: <namespace_name>
  labels:
    app: alertmanager
    environment: <environment_label>
spec:
  replicas: 2
  selector:
    matchLabels:
      app: alertmanager
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: alertmanager
        environment: <environment_label>
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9093"
    spec:
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000
      containers:
        - name: alertmanager
          image: prom/alertmanager:v0.25.0
          imagePullPolicy: IfNotPresent
          args:
            - "--config.file=/etc/alertmanager/alertmanager.yml"
            - "--storage.path=/alertmanager"
            - "--web.external-url=http://alertmanager:9093"
          ports:
            - containerPort: 9093
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/alertmanager
            - name: storage-volume
              mountPath: /alertmanager
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
      volumes:
        - name: config-volume
          configMap:
            name: alertmanager-config
        - name: storage-volume
          emptyDir: {}

---
# Service for Alertmanager
apiVersion: v1
kind: Service
metadata:
  name: alertmanager-service
  namespace: <namespace_name>
  labels:
    app: alertmanager
    environment: <environment_label>
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 9093
      protocol: TCP
      name: http
  selector:
    app: alertmanager

---
# NetworkPolicy for Alertmanager
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: alertmanager-network-policy
  namespace: <namespace_name>
  labels:
    app: alertmanager
    environment: <environment_label>
spec:
  podSelector:
    matchLabels:
      app: alertmanager
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 9093
    - from:
        - podSelector:
            matchLabels:
              app: grafana
      ports:
        - protocol: TCP
          port: 9093
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
      ports:
        - protocol: UDP
          port: 53  # DNS
        - protocol: TCP
          port: 53  # DNS
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
      ports:
        - protocol: TCP
          port: 443  # HTTPS for external notifications